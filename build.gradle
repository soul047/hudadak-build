// build.gradle 파일의 모든 내용을 지우고 아래 코드로 교체하세요.

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.4.1'
    }
}

apply plugin: 'com.android.application'

import groovy.xml.MarkupBuilder

def twaManifest = [
    applicationId: 'app.netlify.app_hudadak.twa',
    hostName: 'app-hudadak.netlify.app',
    launchUrl: '/',
    name: '후다닥 미세먼지 피하기',
    launcherName: '미세먼지',
    themeColor: '#FFFFFF',
    themeColorDark: '#000000',
    navigationColor: '#000000',
    navigationColorDark: '#000000',
    navigationDividerColor: '#000000',
    navigationDividerColorDark: '#000000',
    backgroundColor: '#FFFFFF',
    enableNotifications: true,
    shortcuts: [],
    splashScreenFadeOutDuration: 300,
    generatorApp: 'bubblewrap-cli',
    fallbackType: 'customtabs',
    enableSiteSettingsShortcut: 'true',
    orientation: 'portrait-primary',
]

android {
    compileSdkVersion 36
    namespace "app.netlify.app_hudadak.twa"
    defaultConfig {
        applicationId "app.netlify.app_hudadak.twa"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 61
        versionName "61"
        assetStatements = '[{ "relation": ["delegate_permission/common.handle_all_urls"], "target": { "namespace": "web", "site": "https://app-hudadak.netlify.app" } }]'

        resValue "string", "후다닥 미세먼지 피하기", twaManifest.name
        resValue "string", "launcherName", twaManifest.launcherName
        def launchUrl = "https://" + twaManifest.hostName + twaManifest.launchUrl
        resValue "string", "launchUrl", launchUrl
        resValue "string", "launchHandlerClientMode", 'navigate-existing'
        resValue "string", "webManifestUrl", 'https://app-hudadak.netlify.app/manifest.json'
        resValue "string", "fullScopeUrl", 'https://app-hudadak.netlify.app/'
        resValue "string", "hostName", twaManifest.hostName
        resValue "color", "colorPrimary", twaManifest.themeColor
        resValue "color", "colorPrimaryDark", twaManifest.themeColorDark
        resValue "color", "navigationColor", twaManifest.navigationColor
        resValue "color", "navigationColorDark", twaManifest.navigationColorDark
        resValue "color", "navigationDividerColor", twaManifest.navigationDividerColor
        resValue "color", "navigationDividerColorDark", twaManifest.navigationDividerColorDark
        resValue "color", "backgroundColor", twaManifest.backgroundColor
        resValue "string", "providerAuthority", twaManifest.applicationId + '.fileprovider'
        resValue "bool", "enableNotification", twaManifest.enableNotifications.toString()

        twaManifest.shortcuts.eachWithIndex { shortcut, index ->
            resValue "string", "shortcut_name_$index", "$shortcut.name"
            resValue "string", "shortcut_short_name_$index", "$shortcut.short_name"
        }

        resValue "integer", "splashScreenFadeOutDuration", twaManifest.splashScreenFadeOutDuration.toString()
        resValue "string", "generatorApp", twaManifest.generatorApp
        resValue "string", "fallbackType", twaManifest.fallbackType
        resValue "bool", "enableSiteSettingsShortcut", twaManifest.enableSiteSettingsShortcut
        resValue "string", "orientation", twaManifest.orientation
    }
    buildTypes {
        release {
            minifyEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
    }
}

task generateShorcutsFile {
    assert twaManifest.shortcuts.size() < 5, "You can have at most 4 shortcuts."
    twaManifest.shortcuts.eachWithIndex { s, i ->
        assert s.name != null, 'Missing `name` in shortcut #' + i
        assert s.short_name != null, 'Missing `short_name` in shortcut #' + i
        assert s.url != null, 'Missing `icon` in shortcut #' + i
        assert s.icon != null, 'Missing `url` in shortcut #' + i
    }

    def shortcutsFile = new File("$projectDir/src/main/res/xml", "shortcuts.xml")
    def xmlWriter = new StringWriter()
    def xmlMarkup = new MarkupBuilder(new IndentPrinter(xmlWriter, "    ", true))

    xmlMarkup
        .'shortcuts'('xmlns:android': 'http://schemas.android.com/apk/res/android') {
            twaManifest.shortcuts.eachWithIndex { s, i ->
                'shortcut'(
                        'android:shortcutId': 'shortcut' + i,
                        'android:enabled': 'true',
                        'android:icon': '@drawable/' + s.icon,
                        'android:shortcutShortLabel': '@string/shortcut_short_name_' + i,
                        'android:shortcutLongLabel': '@string/shortcut_name_' + i) {
                    'intent'(
                            'android:action': 'android.intent.action.MAIN',
                            'android:targetPackage': twaManifest.applicationId,
                            'android:targetClass': twaManifest.applicationId + '.LauncherActivity',
                            'android:data': s.url)
                    'categories'('android:name': 'android.intent.category.LAUNCHER')
                }
            }
        }
    shortcutsFile.text = xmlWriter.toString() + '\n'
}

preBuild.dependsOn(generateShorcutsFile)

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.androidbrowserhelper:locationdelegation:1.1.2'
    implementation 'com.google.androidbrowserhelper:androidbrowserhelper:2.6.2'
}
